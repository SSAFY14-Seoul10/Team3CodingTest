import java.io.*;
import java.util.*;

public class Main {
	
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int v = Integer.parseInt(st.nextToken());
		int e = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		
		int k = Integer.parseInt(st.nextToken());
		ArrayList<Edge>[] arrayLists = new ArrayList[v+1];
		PriorityQueue<Edge> queue = new PriorityQueue<>();
        arrayLists = new ArrayList[v+1];
        int[] distance = new int[v+1];

        for(int i=1;i<=v;i++){
            arrayLists[i] = new ArrayList<Edge>();
            distance[i] = Integer.MAX_VALUE;
        }
        distance[k] = 0;
		
		for(int i=0;i<e;i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int value = Integer.parseInt(st.nextToken());
			arrayLists[start].add(new Edge(end,value));
		}
		
		queue.add(new Edge(k, 0));
		
		while(!queue.isEmpty()) {
			Edge now = queue.poll();
			
			if (distance[now.end] < now.value) continue;
			
			for(Edge edge : arrayLists[now.end]) {
				if(distance[edge.end] > distance[now.end] + edge.value) {
					distance[edge.end] = distance[now.end] + edge.value;
					queue.add(new Edge(edge.end, distance[edge.end]));
				}
			}	
		}
		
		StringBuilder sb = new StringBuilder();
		for(int i=1;i<=v;i++) {
			if(distance[i] == Integer.MAX_VALUE) {
				sb.append("INF").append("\n");
			} else {
				sb.append(distance[i]).append("\n");
			}
		}
		System.out.println(sb);
		
	}
	
}


class Edge implements Comparable<Edge>{
	int end;
	int value;
	
	public Edge(int end, int value) {
		this.end = end;
		this.value = value;
	}

	@Override
	public int compareTo(Edge o) {
		return this.value - o.value;
	}
	
	
	
	
	
	
	
}


